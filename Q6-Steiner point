import heapq

def steiner_tree(n, edges, terminals):
    graph = [[] for _ in range(n)]
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))

    visited = [False] * n
    pq = []
    result = 0

    start = list(terminals)[0]
    visited[start] = True
    for v, w in graph[start]:
        heapq.heappush(pq, (w, v))

    while pq and not all(visited[t] for t in terminals):
        w, u = heapq.heappop(pq)
        if visited[u]:
            continue
        visited[u] = True
        result += w
        for v, wt in graph[u]:
            if not visited[v]:
                heapq.heappush(pq, (wt, v))

    return result

# Example
edges = [(0,1,1),(0,2,2),(1,2,1),(1,3,3),(2,3,1)]
terminals = {0,3}
print("Steiner tree cost:", steiner_tree(4, edges, terminals))
