from collections import defaultdict

def accountsMerge(accounts):
    parent = {}
    
    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])  
        return parent[x]
    
    def union(x, y):
        parent[find(x)] = find(y)
    
    email_to_name = {}
    
    # Step 1: Initialize parent for each email and union within accounts
    for account in accounts:
        name = account[0]
        first_email = account[1]
        for email in account[1:]:
            if email not in parent:
                parent[email] = email
            union(first_email, email)  
            email_to_name[email] = name
    
    # Step 2: Group emails by their root
    merged_emails = defaultdict(list)
    for email in parent:
        root = find(email)
        merged_emails[root].append(email)
    
    # Step 3: Build the final result
    result = []
    for root, emails in merged_emails.items():
        name = email_to_name[root]
        result.append([name] + sorted(emails))
    
    return result


# Example Usage
accounts = [
    ["John","johnsmith@mail.com","john_newyork@mail.com"],
    ["John","johnsmith@mail.com","john00@mail.com"],
    ["Mary","mary@mail.com"],
    ["John","johnnybravo@mail.com"]
]

print(accountsMerge(accounts))
